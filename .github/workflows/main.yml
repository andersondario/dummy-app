name: main

on:
  push:
    branches:
      - 'master'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: dummy-app
  ECS_SERVICE: dummy-app-service
  ECS_CLUSTER_PREFIX: cluster
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: dummy-app

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: no

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: buildimage
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=appimage::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    outputs:
      appimage:  ${{ steps.buildimage.outputs.appimage }}

  infraQA:
    name: Provisioning QA infraQA
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: no
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
      - name: Terraform QA Infra
        run: |
          cd infra/development
          terraform init
          terraform plan
          terraform apply -auto-approve

  deployQA:
    name: Deploy QA
    runs-on: ubuntu-latest
    environment: qa
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: no

    - name: Create new Task Definition Version
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build.outputs.appimage }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER_PREFIX }}-qa
        wait-for-service-stability: true
    outputs:
      task-definition: ${{ steps.task-def.outputs.task-definition }}
      
  deployPROD:
    name: Deploy PROD
    runs-on: ubuntu-latest
    environment: prod
    needs: deployQA
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: no
    - name: Deploy Amazon ECS task definition PROD
      uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
      with:
        task-definition: ${{ needs.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER_PREFIX }}-prod
        wait-for-service-stability: true